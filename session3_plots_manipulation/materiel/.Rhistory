knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(visdat)
library(plotly)
setwd("~/Desktop/2021_L3_R/session3_plots_manipulation/")
expt1 <- read_tsv("../data/burghardt_et_al_2015_expt1.txt")
library(gganimate)
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype) +
ease_aes('linear')
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype) +
ease_aes('linear') +
labs(title = 'Genotype: {genotype}', x = 'Days to flower', y = 'Rosette leaf number')
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype, wrap = FALSE, transition_length = 3) +
ease_aes('linear')
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype, wrap = FALSE, transition_length = 3, state_length = 1) +
ease_aes('linear')
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype, wrap = FALSE, transition_length = 3, state_length = 1) +
ease_aes('linear') +
labs(subtitle = "{closest_state}")
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype, wrap = FALSE, transition_length = 4, state_length = 2) +
ease_aes('linear') +
labs(subtitle = "{closest_state}")
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype, wrap = FALSE, transition_length = 1, state_length = 3) +
ease_aes('linear') +
labs(subtitle = "{closest_state}")
library(ggpubr)
panelA <- ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()
panelB <- ggplot(expt1, aes(genotype, days.to.bolt, fill = fluctuation)) +
geom_boxplot() +
facet_grid(. ~ temperature) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggarrange(panelA, panelB, nrow=2, labels =c("A", "B"),heights = c(1.5, 2))
ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point()  +
transition_states(states = genotype, wrap = FALSE, transition_length = 1, state_length = 3) +
ease_aes('linear') +
labs(subtitle = "{closest_state}")
# Mettre le graphique dans l'objet p1
p1 <- ggplot(expt1, aes(blade.length.mm, rosette.leaf.num, colour = fluctuation)) +
geom_point() +
facet_wrap(~genotype)
# Utiliser la fonction ggplotly pour faire un graphique intéractif
ggplotly(p1)
# Mettre le graphique dans l'objet p1
p2 <- ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation, frame=genotype)) +
geom_point()
# Utiliser la fonction ggplotly pour faire un graphique intéractif
ggplotly(p2)
# Mettre le graphique dans l'objet p1
p1 <- ggplot(expt1, aes(rosette.leaf.num, days.to.bolt, colour = fluctuation)) +
geom_point() +
facet_wrap(~genotype)
# Utiliser la fonction ggplotly pour faire un graphique intéractif
ggplotly(p1)
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("spaghetti.png", scale = 0.9)
p2 <- ggdraw() + draw_image("spaghetti_solution_separees.png", scale = 0.9)
p3 <- ggdraw() + draw_image("spaghetti_solution_couleur.png", scale = 0.9)
plot_grid(p1, p2, p3)
install.packages("magic")
install.packages("magick")
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("spaghetti.png", scale = 0.9)
p2 <- ggdraw() + draw_image("spaghetti_solution_separees.png", scale = 0.9)
p3 <- ggdraw() + draw_image("spaghetti_solution_couleur.png", scale = 0.9)
plot_grid(p1, p2, p3)
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("spaghetti_solution_separees.png", scale = 0.9)
p2 <- ggdraw() + draw_image("spaghetti_solution_couleur.png", scale = 0.9)
plot_grid(p1, p2)
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("spaghetti_solution_separees.png", scale = 0.9)
p2 <- ggdraw() + draw_image("spaghetti_solution_couleur.png", scale = 0.9)
plot_grid(p1, p2,rel_widths = c(1, 2))
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("spaghetti_solution_separees.png", scale = 0.9)
p2 <- ggdraw() + draw_image("spaghetti_solution_couleur.png", scale = 0.9)
plot_grid(p1, p2,rel_widths = c(1.5, 2))
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("lollipot_non_ordonne.png", scale = 0.9)
p2 <- ggdraw() + draw_image("lollipot_ordonne.png", scale = 0.9)
plot_grid(p1, p2)
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("point_sature.png", scale = 0.9)
p2 <- ggdraw() + draw_image("densite_2D.png", scale = 0.9)
p2 <- ggdraw() + draw_image("densite_3D.png", scale = 0.9)
plot_grid(p1, p2, p3, ncol=3, nrow=1)
library(cowplot)
library(ggplot2)
p1 <- ggdraw() + draw_image("point_sature.png", scale = 0.9)
p2 <- ggdraw() + draw_image("densite_2D.png", scale = 0.9)
p3 <- ggdraw() + draw_image("densite_3D.png", scale = 0.9)
plot_grid(p1, p2, p3, ncol=3, nrow=1)
library(cowplot)
library(ggplot2)
p4 <- ggdraw() + draw_image("point_sature.png", scale = 0.9)
p5 <- ggdraw() + draw_image("densite_2D.png", scale = 0.9)
p6 <- ggdraw() + draw_image("densite_3D.png", scale = 0.9)
plot_grid(p4, p5, p6, ncol=3, nrow=1)
library(cowplot)
library(ggplot2)
p4 <- ggdraw() + draw_image("point_sature.png", scale = 0.9)
p5 <- ggdraw() + draw_image("densite_2D.png", scale = 0.9)
p6 <- ggdraw() + draw_image("densite_3D.png", scale = 0.9)
plot_grid(p4, p5, p6, ncol=3, nrow=1, rel_widths = c(1,1, 1.3) )
library(cowplot)
library(ggplot2)
p4 <- ggdraw() + draw_image("point_sature.png", scale = 0.9)
p5 <- ggdraw() + draw_image("densite_2D.png", scale = 0.9)
p6 <- ggdraw() + draw_image("densite_3D.png", scale = 0.9)
plot_grid(p4, p5, p6, ncol=3, nrow=1, rel_widths = c(1,1, 1.6) )
library(cowplot)
library(ggplot2)
p4 <- ggdraw() + draw_image("point_sature.png", scale = 0.9)
p5 <- ggdraw() + draw_image("densite_2D.png", scale = 0.9)
p6 <- ggdraw() + draw_image("densite_3D.png", scale = 0.9)
plot_grid(p4, p5, p6, ncol=3, nrow=1, rel_widths = c(1,1, 1.8) )
library(RColorBrewer)
display.brewer.all()
display.brewer.all(colorblindFriendly = TRUE)
